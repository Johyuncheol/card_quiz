/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/rss-parser";
exports.ids = ["vendor-chunks/rss-parser"];
exports.modules = {

/***/ "(rsc)/./node_modules/rss-parser/index.js":
/*!******************************************!*\
  !*** ./node_modules/rss-parser/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nmodule.exports = __webpack_require__(/*! ./lib/parser */ \"(rsc)/./node_modules/rss-parser/lib/parser.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcnNzLXBhcnNlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYix5R0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aHJlZS1xdWl6LWFwcC8uL25vZGVfbW9kdWxlcy9yc3MtcGFyc2VyL2luZGV4LmpzPzEyZWUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL3BhcnNlcicpO1xuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/rss-parser/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/rss-parser/lib/fields.js":
/*!***********************************************!*\
  !*** ./node_modules/rss-parser/lib/fields.js ***!
  \***********************************************/
/***/ ((module) => {

eval("const fields = module.exports = {};\n\nfields.feed = [\n  ['author', 'creator'],\n  ['dc:publisher', 'publisher'],\n  ['dc:creator', 'creator'],\n  ['dc:source', 'source'],\n  ['dc:title', 'title'],\n  ['dc:type', 'type'],\n  'title',\n  'description',\n  'author',\n  'pubDate',\n  'webMaster',\n  'managingEditor',\n  'generator',\n  'link',\n  'language',\n  'copyright',\n  'lastBuildDate',\n  'docs',\n  'generator',\n  'ttl',\n  'rating',\n  'skipHours',\n  'skipDays',\n];\n\nfields.item = [\n  ['author', 'creator'],\n  ['dc:creator', 'creator'],\n  ['dc:date', 'date'],\n  ['dc:language', 'language'],\n  ['dc:rights', 'rights'],\n  ['dc:source', 'source'],\n  ['dc:title', 'title'],\n  'title',\n  'link',\n  'pubDate',\n  'author',\n  'summary',\n  ['content:encoded', 'content:encoded', {includeSnippet: true}],\n  'enclosure',\n  'dc:creator',\n  'dc:date',\n  'comments',\n];\n\nvar mapItunesField = function(f) {\n  return ['itunes:' + f, f];\n}\n\nfields.podcastFeed = ([\n  'author',\n  'subtitle',\n  'summary',\n  'explicit'\n]).map(mapItunesField);\n\nfields.podcastItem = ([\n  'author',\n  'subtitle',\n  'summary',\n  'explicit',\n  'duration',\n  'image',\n  'episode',\n  'image',\n  'season',\n  'keywords',\n  'episodeType'\n]).map(mapItunesField);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcnNzLXBhcnNlci9saWIvZmllbGRzLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHFCQUFxQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aHJlZS1xdWl6LWFwcC8uL25vZGVfbW9kdWxlcy9yc3MtcGFyc2VyL2xpYi9maWVsZHMuanM/ZmIxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmaWVsZHMgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5maWVsZHMuZmVlZCA9IFtcbiAgWydhdXRob3InLCAnY3JlYXRvciddLFxuICBbJ2RjOnB1Ymxpc2hlcicsICdwdWJsaXNoZXInXSxcbiAgWydkYzpjcmVhdG9yJywgJ2NyZWF0b3InXSxcbiAgWydkYzpzb3VyY2UnLCAnc291cmNlJ10sXG4gIFsnZGM6dGl0bGUnLCAndGl0bGUnXSxcbiAgWydkYzp0eXBlJywgJ3R5cGUnXSxcbiAgJ3RpdGxlJyxcbiAgJ2Rlc2NyaXB0aW9uJyxcbiAgJ2F1dGhvcicsXG4gICdwdWJEYXRlJyxcbiAgJ3dlYk1hc3RlcicsXG4gICdtYW5hZ2luZ0VkaXRvcicsXG4gICdnZW5lcmF0b3InLFxuICAnbGluaycsXG4gICdsYW5ndWFnZScsXG4gICdjb3B5cmlnaHQnLFxuICAnbGFzdEJ1aWxkRGF0ZScsXG4gICdkb2NzJyxcbiAgJ2dlbmVyYXRvcicsXG4gICd0dGwnLFxuICAncmF0aW5nJyxcbiAgJ3NraXBIb3VycycsXG4gICdza2lwRGF5cycsXG5dO1xuXG5maWVsZHMuaXRlbSA9IFtcbiAgWydhdXRob3InLCAnY3JlYXRvciddLFxuICBbJ2RjOmNyZWF0b3InLCAnY3JlYXRvciddLFxuICBbJ2RjOmRhdGUnLCAnZGF0ZSddLFxuICBbJ2RjOmxhbmd1YWdlJywgJ2xhbmd1YWdlJ10sXG4gIFsnZGM6cmlnaHRzJywgJ3JpZ2h0cyddLFxuICBbJ2RjOnNvdXJjZScsICdzb3VyY2UnXSxcbiAgWydkYzp0aXRsZScsICd0aXRsZSddLFxuICAndGl0bGUnLFxuICAnbGluaycsXG4gICdwdWJEYXRlJyxcbiAgJ2F1dGhvcicsXG4gICdzdW1tYXJ5JyxcbiAgWydjb250ZW50OmVuY29kZWQnLCAnY29udGVudDplbmNvZGVkJywge2luY2x1ZGVTbmlwcGV0OiB0cnVlfV0sXG4gICdlbmNsb3N1cmUnLFxuICAnZGM6Y3JlYXRvcicsXG4gICdkYzpkYXRlJyxcbiAgJ2NvbW1lbnRzJyxcbl07XG5cbnZhciBtYXBJdHVuZXNGaWVsZCA9IGZ1bmN0aW9uKGYpIHtcbiAgcmV0dXJuIFsnaXR1bmVzOicgKyBmLCBmXTtcbn1cblxuZmllbGRzLnBvZGNhc3RGZWVkID0gKFtcbiAgJ2F1dGhvcicsXG4gICdzdWJ0aXRsZScsXG4gICdzdW1tYXJ5JyxcbiAgJ2V4cGxpY2l0J1xuXSkubWFwKG1hcEl0dW5lc0ZpZWxkKTtcblxuZmllbGRzLnBvZGNhc3RJdGVtID0gKFtcbiAgJ2F1dGhvcicsXG4gICdzdWJ0aXRsZScsXG4gICdzdW1tYXJ5JyxcbiAgJ2V4cGxpY2l0JyxcbiAgJ2R1cmF0aW9uJyxcbiAgJ2ltYWdlJyxcbiAgJ2VwaXNvZGUnLFxuICAnaW1hZ2UnLFxuICAnc2Vhc29uJyxcbiAgJ2tleXdvcmRzJyxcbiAgJ2VwaXNvZGVUeXBlJ1xuXSkubWFwKG1hcEl0dW5lc0ZpZWxkKTtcblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/rss-parser/lib/fields.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/rss-parser/lib/parser.js":
/*!***********************************************!*\
  !*** ./node_modules/rss-parser/lib/parser.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst xml2js = __webpack_require__(/*! xml2js */ \"(rsc)/./node_modules/xml2js/lib/xml2js.js\");\nconst url = __webpack_require__(/*! url */ \"url\");\n\nconst fields = __webpack_require__(/*! ./fields */ \"(rsc)/./node_modules/rss-parser/lib/fields.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/rss-parser/lib/utils.js\");\n\nconst DEFAULT_HEADERS = {\n  'User-Agent': 'rss-parser',\n  'Accept': 'application/rss+xml',\n}\nconst DEFAULT_MAX_REDIRECTS = 5;\nconst DEFAULT_TIMEOUT = 60000;\n\nclass Parser {\n  constructor(options={}) {\n    options.headers = options.headers || {};\n    options.xml2js = options.xml2js || {};\n    options.customFields = options.customFields || {};\n    options.customFields.item = options.customFields.item || [];\n    options.customFields.feed = options.customFields.feed || [];\n    options.requestOptions = options.requestOptions || {};\n    if (!options.maxRedirects) options.maxRedirects = DEFAULT_MAX_REDIRECTS;\n    if (!options.timeout) options.timeout = DEFAULT_TIMEOUT;\n    this.options = options;\n    this.xmlParser = new xml2js.Parser(this.options.xml2js);\n  }\n\n  parseString(xml, callback) {\n    let prom = new Promise((resolve, reject) => {\n      this.xmlParser.parseString(xml, (err, result) => {\n        if (err) return reject(err);\n        if (!result) {\n          return reject(new Error('Unable to parse XML.'));\n        }\n        let feed = null;\n        if (result.feed) {\n          feed = this.buildAtomFeed(result);\n        } else if (result.rss && result.rss.$ && result.rss.$.version && result.rss.$.version.match(/^2/)) {\n          feed = this.buildRSS2(result);\n        } else if (result['rdf:RDF']) {\n          feed = this.buildRSS1(result);\n        } else if (result.rss && result.rss.$ && result.rss.$.version && result.rss.$.version.match(/0\\.9/)) {\n          feed = this.buildRSS0_9(result);\n        } else if (result.rss && this.options.defaultRSS) {\n          switch(this.options.defaultRSS) {\n            case 0.9:\n              feed = this.buildRSS0_9(result);\n              break;\n            case 1:\n              feed = this.buildRSS1(result);\n              break;\n            case 2:\n              feed = this.buildRSS2(result);\n              break;\n            default:\n              return reject(new Error(\"default RSS version not recognized.\"))\n          }\n        } else {\n          return reject(new Error(\"Feed not recognized as RSS 1 or 2.\"))\n        }\n        resolve(feed);\n      });\n    });\n    prom = utils.maybePromisify(callback, prom);\n    return prom;\n  }\n\n  parseURL(feedUrl, callback, redirectCount=0) {\n    let xml = '';\n    let get = feedUrl.indexOf('https') === 0 ? https.get : http.get;\n    let urlParts = url.parse(feedUrl);\n    let headers = Object.assign({}, DEFAULT_HEADERS, this.options.headers);\n    let timeout = null;\n    let prom = new Promise((resolve, reject) => {\n      const requestOpts = Object.assign({headers}, urlParts, this.options.requestOptions);\n      let req = get(requestOpts, (res) => {\n        if (this.options.maxRedirects && res.statusCode >= 300 && res.statusCode < 400 && res.headers['location']) {\n          if (redirectCount === this.options.maxRedirects) {\n            return reject(new Error(\"Too many redirects\"));\n          } else {\n            const newLocation = url.resolve(feedUrl, res.headers['location']);\n            return this.parseURL(newLocation, null, redirectCount + 1).then(resolve, reject);\n          }\n        } else if (res.statusCode >= 300) {\n          return reject(new Error(\"Status code \" + res.statusCode))\n        }\n        let encoding = utils.getEncodingFromContentType(res.headers['content-type']);\n        res.setEncoding(encoding);\n        res.on('data', (chunk) => {\n          xml += chunk;\n        });\n        res.on('end', () => {\n          return this.parseString(xml).then(resolve, reject);\n        });\n      })\n      req.on('error', reject);\n      timeout = setTimeout(() => {\n        return reject(new Error(\"Request timed out after \" + this.options.timeout + \"ms\"));\n      }, this.options.timeout);\n    }).then(data => {\n      clearTimeout(timeout);\n      return Promise.resolve(data);\n    }, e => {\n      clearTimeout(timeout);\n      return Promise.reject(e);\n    });\n    prom = utils.maybePromisify(callback, prom);\n    return prom;\n  }\n\n  buildAtomFeed(xmlObj) {\n    let feed = {items: []};\n    utils.copyFromXML(xmlObj.feed, feed, this.options.customFields.feed);\n    if (xmlObj.feed.link) {\n      feed.link = utils.getLink(xmlObj.feed.link, 'alternate', 0);\n      feed.feedUrl = utils.getLink(xmlObj.feed.link, 'self', 1);\n    }\n    if (xmlObj.feed.title) {\n      let title = xmlObj.feed.title[0] || '';\n      if (title._) title = title._\n      if (title) feed.title = title;\n    }\n    if (xmlObj.feed.updated) {\n      feed.lastBuildDate = xmlObj.feed.updated[0];\n    }\n    feed.items = (xmlObj.feed.entry || []).map(entry => this.parseItemAtom(entry));\n    return feed;\n  }\n\n  parseItemAtom(entry) {\n    let item = {};\n    utils.copyFromXML(entry, item, this.options.customFields.item);\n    if (entry.title) {\n      let title = entry.title[0] || '';\n      if (title._) title = title._;\n      if (title) item.title = title;\n    }\n    if (entry.link && entry.link.length) {\n      item.link = utils.getLink(entry.link, 'alternate', 0);\n    }\n    if (entry.published && entry.published.length && entry.published[0].length) item.pubDate = new Date(entry.published[0]).toISOString();\n    if (!item.pubDate && entry.updated && entry.updated.length && entry.updated[0].length) item.pubDate = new Date(entry.updated[0]).toISOString();\n    if (entry.author && entry.author.length && entry.author[0].name && entry.author[0].name.length) item.author = entry.author[0].name[0];\n    if (entry.content && entry.content.length) {\n      item.content = utils.getContent(entry.content[0]);\n      item.contentSnippet = utils.getSnippet(item.content)\n    }\n    if (entry.summary && entry.summary.length) {\n      item.summary = utils.getContent(entry.summary[0]);\n    }\n    if (entry.id) {\n      item.id = entry.id[0];\n    }\n    this.setISODate(item);\n    return item;\n  }\n\n  buildRSS0_9(xmlObj) {\n    var channel = xmlObj.rss.channel[0];\n    var items = channel.item;\n    return this.buildRSS(channel, items);\n  }\n\n  buildRSS1(xmlObj) {\n    xmlObj = xmlObj['rdf:RDF'];\n    let channel = xmlObj.channel[0];\n    let items = xmlObj.item;\n    return this.buildRSS(channel, items);\n  }\n\n  buildRSS2(xmlObj) {\n    let channel = xmlObj.rss.channel[0];\n    let items = channel.item;\n    let feed = this.buildRSS(channel, items);\n    if (xmlObj.rss.$ && xmlObj.rss.$['xmlns:itunes']) {\n      this.decorateItunes(feed, channel);\n    }\n    return feed;\n  }\n\n  buildRSS(channel, items) {\n    items = items || [];\n    let feed = {items: []};\n    let feedFields = fields.feed.concat(this.options.customFields.feed);\n    let itemFields = fields.item.concat(this.options.customFields.item);\n    if (channel['atom:link'] && channel['atom:link'][0] && channel['atom:link'][0].$) {\n      feed.feedUrl = channel['atom:link'][0].$.href;\n    }\n    if (channel.image && channel.image[0] && channel.image[0].url) {\n      feed.image = {};\n      let image = channel.image[0];\n      if (image.link) feed.image.link = image.link[0];\n      if (image.url) feed.image.url = image.url[0];\n      if (image.title) feed.image.title = image.title[0];\n      if (image.width) feed.image.width = image.width[0];\n      if (image.height) feed.image.height = image.height[0];\n    }\n    const paginationLinks = this.generatePaginationLinks(channel);\n    if (Object.keys(paginationLinks).length) {\n      feed.paginationLinks = paginationLinks;\n    }\n    utils.copyFromXML(channel, feed, feedFields);\n    feed.items = items.map(xmlItem => this.parseItemRss(xmlItem, itemFields));\n    return feed;\n  }\n\n  parseItemRss(xmlItem, itemFields) {\n    let item = {};\n    utils.copyFromXML(xmlItem, item, itemFields);\n    if (xmlItem.enclosure) {\n      item.enclosure = xmlItem.enclosure[0].$;\n    }\n    if (xmlItem.description) {\n      item.content = utils.getContent(xmlItem.description[0]);\n      item.contentSnippet = utils.getSnippet(item.content);\n    }\n    if (xmlItem.guid) {\n      item.guid = xmlItem.guid[0];\n      if (item.guid._) item.guid = item.guid._;\n    }\n    if (xmlItem.$ && xmlItem.$['rdf:about']) {\n      item['rdf:about'] = xmlItem.$['rdf:about']\n    }\n    if (xmlItem.category) item.categories = xmlItem.category;\n    this.setISODate(item);\n    return item;\n  }\n\n  /**\n   * Add iTunes specific fields from XML to extracted JSON\n   *\n   * @access public\n   * @param {object} feed extracted\n   * @param {object} channel parsed XML\n   */\n  decorateItunes(feed, channel) {\n    let items = channel.item || [];\n    let categories = [];\n    feed.itunes = {}\n\n    if (channel['itunes:owner']) {\n      let owner = {};\n\n      if(channel['itunes:owner'][0]['itunes:name']) {\n        owner.name = channel['itunes:owner'][0]['itunes:name'][0];\n      }\n      if(channel['itunes:owner'][0]['itunes:email']) {\n        owner.email = channel['itunes:owner'][0]['itunes:email'][0];\n      }\n      feed.itunes.owner = owner;\n    }\n\n    if (channel['itunes:image']) {\n      let image;\n      let hasImageHref = (channel['itunes:image'][0] &&\n        channel['itunes:image'][0].$ &&\n        channel['itunes:image'][0].$.href);\n      image = hasImageHref ? channel['itunes:image'][0].$.href : null;\n      if (image) {\n        feed.itunes.image = image;\n      }\n    }\n\n    if (channel['itunes:category']) {\n      const categoriesWithSubs = channel['itunes:category'].map((category) => {\n        return {\n          name: category && category.$ && category.$.text,\n          subs: category['itunes:category'] ?\n            category['itunes:category']\n              .map((subcategory) => ({\n                name: subcategory && subcategory.$ && subcategory.$.text\n              })) : null,\n        };\n      });\n\n      feed.itunes.categories = categoriesWithSubs.map((category) => category.name);\n      feed.itunes.categoriesWithSubs = categoriesWithSubs;\n    }\n\n    if (channel['itunes:keywords']) {\n      if (channel['itunes:keywords'].length > 1) {\n        feed.itunes.keywords = channel['itunes:keywords'].map(\n          keyword => keyword && keyword.$ && keyword.$.text\n        );\n      } else {\n        let keywords = channel['itunes:keywords'][0];\n        if (keywords && typeof keywords._ === 'string') {\n          keywords = keywords._;\n        }\n\n        if (keywords && keywords.$ && keywords.$.text) {\n          feed.itunes.keywords = keywords.$.text.split(',')\n        } else if (typeof keywords === \"string\") {\n          feed.itunes.keywords = keywords.split(',');\n        }\n      }\n    }\n\n    utils.copyFromXML(channel, feed.itunes, fields.podcastFeed);\n    items.forEach((item, index) => {\n      let entry = feed.items[index];\n      entry.itunes = {};\n      utils.copyFromXML(item, entry.itunes, fields.podcastItem);\n      let image = item['itunes:image'];\n      if (image && image[0] && image[0].$ && image[0].$.href) {\n        entry.itunes.image = image[0].$.href;\n      }\n    });\n  }\n\n  setISODate(item) {\n    let date = item.pubDate || item.date;\n    if (date) {\n      try {\n        item.isoDate = new Date(date.trim()).toISOString();\n      } catch (e) {\n        // Ignore bad date format\n      }\n    }\n  }\n\n  /**\n   * Generates a pagination object where the rel attribute is the key and href attribute is the value\n   *  { self: 'self-url', first: 'first-url', ...  }\n   *\n   * @access private\n   * @param {Object} channel parsed XML\n   * @returns {Object}\n   */\n  generatePaginationLinks(channel) {\n    if (!channel['atom:link']) {\n      return {};\n    }\n    const paginationRelAttributes = ['self', 'first', 'next', 'prev', 'last'];\n\n    return channel['atom:link'].reduce((paginationLinks, link) => {\n      if (!link.$ || !paginationRelAttributes.includes(link.$.rel)) {\n        return paginationLinks;\n      }\n      paginationLinks[link.$.rel] = link.$.href;\n      return paginationLinks;\n    }, {});\n  }\n}\n\nmodule.exports = Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/rss-parser/lib/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/rss-parser/lib/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/rss-parser/lib/utils.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const utils = module.exports = {};\nconst entities = __webpack_require__(/*! entities */ \"(rsc)/./node_modules/entities/lib/index.js\");\nconst xml2js = __webpack_require__(/*! xml2js */ \"(rsc)/./node_modules/xml2js/lib/xml2js.js\");\n\nutils.stripHtml = function(str) {\n  str = str.replace(/([^\\n])<\\/?(h|br|p|ul|ol|li|blockquote|section|table|tr|div)(?:.|\\n)*?>([^\\n])/gm, '$1\\n$3')\n  str = str.replace(/<(?:.|\\n)*?>/gm, '');\n  return str;\n}\n\nutils.getSnippet = function(str) {\n  return entities.decodeHTML(utils.stripHtml(str)).trim();\n}\n\nutils.getLink = function(links, rel, fallbackIdx) {\n  if (!links) return;\n  for (let i = 0; i < links.length; ++i) {\n    if (links[i].$.rel === rel) return links[i].$.href;\n  }\n  if (links[fallbackIdx]) return links[fallbackIdx].$.href;\n}\n\nutils.getContent = function(content) {\n  if (typeof content._ === 'string') {\n    return content._;\n  } else if (typeof content === 'object') {\n    let builder = new xml2js.Builder({headless: true, explicitRoot: true, rootName: 'div', renderOpts: {pretty: false}});\n    return builder.buildObject(content);\n  } else {\n    return content;\n  }\n}\n\nutils.copyFromXML = function(xml, dest, fields) {\n  fields.forEach(function(f) {\n    let from = f;\n    let to = f;\n    let options = {};\n    if (Array.isArray(f)) {\n      from = f[0];\n      to = f[1];\n      if (f.length > 2) {\n        options = f[2];\n      }\n    }\n    const { keepArray, includeSnippet } = options;\n    if (xml[from] !== undefined){\n      dest[to] = keepArray ? xml[from] : xml[from][0];\n    }\n    if (dest[to] && typeof dest[to]._ === 'string') {\n      dest[to]=dest[to]._;\n    }\n    if (includeSnippet && dest[to] && typeof dest[to] === 'string') {\n      dest[to + 'Snippet'] = utils.getSnippet(dest[to]);\n    }\n  })\n}\n\nutils.maybePromisify = function(callback, promise) {\n  if (!callback) return promise;\n  return promise.then(\n    data => setTimeout(() => callback(null, data)),\n    err => setTimeout(() => callback(err))\n  );\n}\n\nconst DEFAULT_ENCODING = 'utf8';\nconst ENCODING_REGEX = /(encoding|charset)\\s*=\\s*(\\S+)/;\nconst SUPPORTED_ENCODINGS = ['ascii', 'utf8', 'utf16le', 'ucs2', 'base64', 'latin1', 'binary', 'hex'];\nconst ENCODING_ALIASES = {\n  'utf-8': 'utf8',\n  'iso-8859-1': 'latin1',\n}\n\nutils.getEncodingFromContentType = function(contentType) {\n  contentType = contentType || '';\n  let match = contentType.match(ENCODING_REGEX);\n  let encoding = (match || [])[2] || '';\n  encoding = encoding.toLowerCase();\n  encoding = ENCODING_ALIASES[encoding] || encoding;\n  if (!encoding || SUPPORTED_ENCODINGS.indexOf(encoding) === -1) {\n    encoding = DEFAULT_ENCODING;\n  }\n  return encoding;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcnNzLXBhcnNlci9saWIvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQyw0REFBVTtBQUNuQyxlQUFlLG1CQUFPLENBQUMseURBQVE7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0Isa0JBQWtCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixzQ0FBc0Msa0VBQWtFLGVBQWU7QUFDdkg7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNEJBQTRCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhyZWUtcXVpei1hcHAvLi9ub2RlX21vZHVsZXMvcnNzLXBhcnNlci9saWIvdXRpbHMuanM/MDA4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dGlscyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5jb25zdCBlbnRpdGllcyA9IHJlcXVpcmUoJ2VudGl0aWVzJyk7XG5jb25zdCB4bWwyanMgPSByZXF1aXJlKCd4bWwyanMnKTtcblxudXRpbHMuc3RyaXBIdG1sID0gZnVuY3Rpb24oc3RyKSB7XG4gIHN0ciA9IHN0ci5yZXBsYWNlKC8oW15cXG5dKTxcXC8/KGh8YnJ8cHx1bHxvbHxsaXxibG9ja3F1b3RlfHNlY3Rpb258dGFibGV8dHJ8ZGl2KSg/Oi58XFxuKSo/PihbXlxcbl0pL2dtLCAnJDFcXG4kMycpXG4gIHN0ciA9IHN0ci5yZXBsYWNlKC88KD86LnxcXG4pKj8+L2dtLCAnJyk7XG4gIHJldHVybiBzdHI7XG59XG5cbnV0aWxzLmdldFNuaXBwZXQgPSBmdW5jdGlvbihzdHIpIHtcbiAgcmV0dXJuIGVudGl0aWVzLmRlY29kZUhUTUwodXRpbHMuc3RyaXBIdG1sKHN0cikpLnRyaW0oKTtcbn1cblxudXRpbHMuZ2V0TGluayA9IGZ1bmN0aW9uKGxpbmtzLCByZWwsIGZhbGxiYWNrSWR4KSB7XG4gIGlmICghbGlua3MpIHJldHVybjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5rcy5sZW5ndGg7ICsraSkge1xuICAgIGlmIChsaW5rc1tpXS4kLnJlbCA9PT0gcmVsKSByZXR1cm4gbGlua3NbaV0uJC5ocmVmO1xuICB9XG4gIGlmIChsaW5rc1tmYWxsYmFja0lkeF0pIHJldHVybiBsaW5rc1tmYWxsYmFja0lkeF0uJC5ocmVmO1xufVxuXG51dGlscy5nZXRDb250ZW50ID0gZnVuY3Rpb24oY29udGVudCkge1xuICBpZiAodHlwZW9mIGNvbnRlbnQuXyA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gY29udGVudC5fO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnb2JqZWN0Jykge1xuICAgIGxldCBidWlsZGVyID0gbmV3IHhtbDJqcy5CdWlsZGVyKHtoZWFkbGVzczogdHJ1ZSwgZXhwbGljaXRSb290OiB0cnVlLCByb290TmFtZTogJ2RpdicsIHJlbmRlck9wdHM6IHtwcmV0dHk6IGZhbHNlfX0pO1xuICAgIHJldHVybiBidWlsZGVyLmJ1aWxkT2JqZWN0KGNvbnRlbnQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG59XG5cbnV0aWxzLmNvcHlGcm9tWE1MID0gZnVuY3Rpb24oeG1sLCBkZXN0LCBmaWVsZHMpIHtcbiAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24oZikge1xuICAgIGxldCBmcm9tID0gZjtcbiAgICBsZXQgdG8gPSBmO1xuICAgIGxldCBvcHRpb25zID0ge307XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZikpIHtcbiAgICAgIGZyb20gPSBmWzBdO1xuICAgICAgdG8gPSBmWzFdO1xuICAgICAgaWYgKGYubGVuZ3RoID4gMikge1xuICAgICAgICBvcHRpb25zID0gZlsyXTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgeyBrZWVwQXJyYXksIGluY2x1ZGVTbmlwcGV0IH0gPSBvcHRpb25zO1xuICAgIGlmICh4bWxbZnJvbV0gIT09IHVuZGVmaW5lZCl7XG4gICAgICBkZXN0W3RvXSA9IGtlZXBBcnJheSA/IHhtbFtmcm9tXSA6IHhtbFtmcm9tXVswXTtcbiAgICB9XG4gICAgaWYgKGRlc3RbdG9dICYmIHR5cGVvZiBkZXN0W3RvXS5fID09PSAnc3RyaW5nJykge1xuICAgICAgZGVzdFt0b109ZGVzdFt0b10uXztcbiAgICB9XG4gICAgaWYgKGluY2x1ZGVTbmlwcGV0ICYmIGRlc3RbdG9dICYmIHR5cGVvZiBkZXN0W3RvXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGRlc3RbdG8gKyAnU25pcHBldCddID0gdXRpbHMuZ2V0U25pcHBldChkZXN0W3RvXSk7XG4gICAgfVxuICB9KVxufVxuXG51dGlscy5tYXliZVByb21pc2lmeSA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBwcm9taXNlKSB7XG4gIGlmICghY2FsbGJhY2spIHJldHVybiBwcm9taXNlO1xuICByZXR1cm4gcHJvbWlzZS50aGVuKFxuICAgIGRhdGEgPT4gc2V0VGltZW91dCgoKSA9PiBjYWxsYmFjayhudWxsLCBkYXRhKSksXG4gICAgZXJyID0+IHNldFRpbWVvdXQoKCkgPT4gY2FsbGJhY2soZXJyKSlcbiAgKTtcbn1cblxuY29uc3QgREVGQVVMVF9FTkNPRElORyA9ICd1dGY4JztcbmNvbnN0IEVOQ09ESU5HX1JFR0VYID0gLyhlbmNvZGluZ3xjaGFyc2V0KVxccyo9XFxzKihcXFMrKS87XG5jb25zdCBTVVBQT1JURURfRU5DT0RJTkdTID0gWydhc2NpaScsICd1dGY4JywgJ3V0ZjE2bGUnLCAndWNzMicsICdiYXNlNjQnLCAnbGF0aW4xJywgJ2JpbmFyeScsICdoZXgnXTtcbmNvbnN0IEVOQ09ESU5HX0FMSUFTRVMgPSB7XG4gICd1dGYtOCc6ICd1dGY4JyxcbiAgJ2lzby04ODU5LTEnOiAnbGF0aW4xJyxcbn1cblxudXRpbHMuZ2V0RW5jb2RpbmdGcm9tQ29udGVudFR5cGUgPSBmdW5jdGlvbihjb250ZW50VHlwZSkge1xuICBjb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlIHx8ICcnO1xuICBsZXQgbWF0Y2ggPSBjb250ZW50VHlwZS5tYXRjaChFTkNPRElOR19SRUdFWCk7XG4gIGxldCBlbmNvZGluZyA9IChtYXRjaCB8fCBbXSlbMl0gfHwgJyc7XG4gIGVuY29kaW5nID0gZW5jb2RpbmcudG9Mb3dlckNhc2UoKTtcbiAgZW5jb2RpbmcgPSBFTkNPRElOR19BTElBU0VTW2VuY29kaW5nXSB8fCBlbmNvZGluZztcbiAgaWYgKCFlbmNvZGluZyB8fCBTVVBQT1JURURfRU5DT0RJTkdTLmluZGV4T2YoZW5jb2RpbmcpID09PSAtMSkge1xuICAgIGVuY29kaW5nID0gREVGQVVMVF9FTkNPRElORztcbiAgfVxuICByZXR1cm4gZW5jb2Rpbmc7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/rss-parser/lib/utils.js\n");

/***/ })

};
;